"""判断数独是否合理 用到哈希映射
请你判断一个 9 x 9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。
数字 1-9 在每一行只能出现一次。
数字 1-9 在每一列只能出现一次。
数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
注意：
一个有效的数独（部分已被填充）不一定是可解的。
只需要根据以上规则，验证已经填入的数字是否有效即可。
空白格用 '.' 表示。
来源：力扣（LeetCode）
链接：https://leetcode.cn/problems/valid-sudoku
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
"""

"""理解
判断每一行,每一列和每一块,是否有重复元素.对行/列/块都映射一个哈希表,
对行来说:映射一个行二维哈希表(Trow,初始都为0),二维哈希表的行号代表"行",列号代表数独表 "对应行列的数据",假设board[0][4]=7,对于Trow来说,代表Trow[0]的第[7]列的数据加1即(Trow[0][7]+=1).
对列来说一样,列二维哈希表(Tcol,初始都为0),假设board[0][4]=7,对于Tcol来说,代表Tcol[4]的第[7]列的数据加1(Tcol[4][7]+=1)
每一行/列不能有重复的元素,如果有重复数据的话,对应的二维表一定不为1
对于块来说,只需要三行三列,但是每一个块来说,里面有9个数,所以要开成Tbox[3][3][9],三维哈希表(Tbox,初始都为0),假设board[0][4]=7,对于Tbox来说,代表Tbox[0//3][4//3]的第7列的数据加1(即Tbox[0][1][7]+=1)
"""

# 代码:
class Solution:
    def isValidSudoku(self, board: list[list[str]]) -> bool:
        Trow = [[0 for i in range(9)] for j in range(9)] # 行哈希 二维数组，每一行对应的数据列+1（行为主）
        Tcol = [[0 for i in range(9)] for j in range(9)] # 列哈希 二维数组，每一行对应的数据列+1（列为主）
        Tbox = [[[0 for i in range(9)] for j in range(3)] for n in range(3)] # 块哈希 分析内部需要9个，需要三行，三列

        for row in range(9):
            for col in range(9):
                if board[row][col] != ".":
                    data = int(board[row][col])-1
                    Trow[row][data]+=1
                    Tcol[col][data]+=1
                    Tbox[row//3][col//3][data]+=1
                    if Trow[row][data]>1 or Tcol[col][data]>1 or Tbox[row//3][col//3][data]>1:
                        return False
        return True

def main():
    temp = Solution()
    board = [["5","3",".",".","7",".",".",".","."]
        ,["6",".",".","1","9","5",".",".","."]
        ,[".","9","8",".",".",".",".","6","."]
        ,["8",".",".",".","6",".",".",".","3"]
        ,["4",".",".","8",".","3",".",".","1"]
        ,["7",".",".",".","2",".",".",".","6"]
        ,[".","6",".",".",".",".","2","8","."]
        ,[".",".",".","4","1","9",".",".","5"]
        ,[".",".",".",".","8",".",".","7","9"]]
    print(temp.isValidSudoku(board))



if __name__ == "__main__":
    main()