#----1-----32 ms	15 MB
"""判断括号是否有效,可以通过对字典对不同的括号赋不同的值，例如Dict_in={"(":1,"{":2,"[":3}，Dict_out={")":-1,"}":-2,"]":-3}，创建一个列表lt，由于合法的括号左右两边是对称闭合的，所以出现Dict_in
里面的数据，则对列表追加对应的数，若出现Dict_out表里的数据，则从最后一个判断，若他们值相反则证明这个括号是合法闭合的，否则就是无效的。
注意的是：若先出现Dict_out里面的数据则肯定错误，即对应的右括号不会在左括号前边。
通过对每个合法对称闭合的括号进行记录，若这个字符串合法，则这个记录的答案一定是长度的一半。
若字符串的长度不是偶数，则括号一定不合法"""
class Solution:
    def isValid(self, s: str) -> bool:
        length = len(s)    #得到所需字符串的长度
        if length%2!=0:    #若不是偶数，则括号一定不是成对出现的，返回False
            return False
        else:
            num = 0        #用来记录合法括号的个数
            Dict_in = {"(":1,"{":2,"[":3}       #模拟括号对应的数，便于操作
            Dict_out = {")":-1,"}":-2,"]":-3}
            lt = []       #用来对数据进行存取和判断的列表
            for i in s:
                if i in Dict_in:      #如果是左括号则向列表中加入对应的数
                    lt.append(Dict_in[i])
                else:                 #否则，则是右括号
                    if len(lt)==0:    #如果lt为0 有两种情况：1、字符串的第一个字符就是右括号。2、字符串前方的括号都对应合法，此时出现了一个右括号且前方无对应合法的左括号
                        return False
                    if lt.pop()==(-1)*Dict_out[i]:   #弹出最后一个数，用来判断对应括号是否合法
                        num+=1        #更新合法括号的个数
                        continue
                    else:            #对应括号不合法直接返回False
                        return False
            if length/2 ==num:       #只有合法括号的个数是字符串长度的一半，才返回True
                return True
            else:
                return False
